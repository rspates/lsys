package drawing.metric

import static org.junit.jupiter.api.Assertions.*
import util.Args

import org.junit.jupiter.api.Test

class Rsi {


	/**
	 * Run an L-System
	 * @param args
	 */
	public static void main(String[] args){

		def map = Args.get(args)
		if (map.isEmpty()) {
			println """
Usage, drawing.lsys.LSDriver -rule LSysRuleFile -image imageFile(jpg) {-sleep millisecs}
"""
			return
		}
		def file = map["file"]
		def time = (map["sleep"]?:"500") as long
		assert file , "no file"
		
		def rsi = new Rsi()
		for (int i=0;true;i++) {
			rsi.read(file)
			sleep(time)
		}
	}

	@Test
	void read(file) {
		//def file="C:/Users/rick_spates/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/Data/rsi.csv"
		new File(file).eachLine{
			def f = it.split(/[ \t]+/)
			println f[2]
		}
	}


	def log = """EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  47.14716177852501       0.570567644294998
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  48.02274360165639       0.3954512796687212
EURUSD  48.02274360165639       0.3954512796687212
EURUSD  48.02274360165639       0.3954512796687212
EURUSD  48.02274360165639       0.3954512796687212
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  48.02274360165639       0.3954512796687212
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.14716177852501       0.570567644294998
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  48.02274360165639       0.3954512796687212
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.58860929047717       0.4822781419045669
EURUSD  47.14716177852501       0.570567644294998
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.36610253451478       0.7267794930970439
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.36610253451478       0.7267794930970439
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.36610253451478       0.7267794930970439
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.36610253451478       0.7267794930970439
EURUSD  46.75337030085522       0.6493259398289553
EURUSD  46.36610253451478       0.7267794930970439
EURUSD  44.8791303273571        1.024173934528579
EURUSD  45.24185969368095       0.9516280612638098
EURUSD  44.8791303273571        1.024173934528579
EURUSD  43.82502100002301       1.234995799995399
EURUSD  44.17084543879133       1.165830912241734
EURUSD  43.82502100002301       1.234995799995399
EURUSD  43.82502100002301       1.234995799995399
EURUSD  44.17084543879133       1.165830912241734
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.522171108113 1.0955657783774
EURUSD  44.8791303273571        1.024173934528579
EURUSD  44.522171108113 1.0955657783774
EURUSD  43.82502100002301       1.234995799995399
EURUSD  43.48456958411457       1.303086083177087
EURUSD  43.95345480305573       1.209309039388855
EURUSD  43.48456958411457       1.303086083177085
EURUSD  43.95345480305573       1.209309039388855
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.41462374617284       1.117075250765431
EURUSD  43.48456958411457       1.303086083177085
EURUSD  42.41991496295126       1.516017007409748
EURUSD  41.40614739908626       1.718770520182748
EURUSD  41.07890751631164       1.784218496737672
EURUSD  41.40614739908626       1.718770520182748
EURUSD  41.07890751631164       1.784218496737672
EURUSD  40.43970369144321       1.912059261711357
EURUSD  40.75679954100973       1.848640091798053
EURUSD  40.43970369144321       1.912059261711357
EURUSD  40.75679954100973       1.848640091798053
EURUSD  40.43970369144321       1.912059261711357
EURUSD  40.75679954100973       1.848640091798053
EURUSD  40.43970369144321       1.912059261711357
EURUSD  40.75679954100973       1.848640091798053
EURUSD  40.75679954100973       1.848640091798053
EURUSD  41.73864281848535       1.652271436302931
EURUSD  42.07652140682305       1.58469571863539
EURUSD  42.41991496295126       1.516017007409748
EURUSD  42.76895962363184       1.446208075273633
EURUSD  42.76895962363184       1.446208075273633
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.41462374617284       1.117075250765431
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.86826533492376       1.026346933015249
EURUSD  45.31456237344194       0.9370875253116125
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.41462374617284       1.117075250765431
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.41462374617284       1.117075250765431
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.41462374617284       1.117075250765431
EURUSD  44.86826533492376       1.026346933015249
EURUSD  44.86826533492376       1.026346933015249
"""

	@Test
	void test0() {
		log.eachLine{
			def f = it.split(/[ \t]+/)
			println f[2]
		}
	}
	
	// 3.414 s, about .04 s / exec
	@Test
	void test() {
		//println "deg\trsi\tx\tr\t\t\tr % x\t\t\tr % x - x\t\toffset\t\t\tresult\t"
		(0..10).each{
			def file = "junk.txt"
			//def d = getRsi(file)
			print "$it\t"
			def d = degrees(26)
			println d 
		}
	}
	def getRsi(file) {
		def output = "tail -1 $file".execute().text
		def s = output.split(/[ \t]+/)[2]
		s.substring(0,s.indexOf('.')+3) as double
	}
	
	def getRsi() {
		4.1
		//getRsi("junk.txt")
	}
	def random
	def degrees0(degrees) {
		if (!random) random = new Random()
		def rsi = 	getRsi()
		print "$rsi\t"
		def x = Math.round(rsi) == 0 ? 1 : Math.round(rsi)
		print "$x\t"
		def r = random.nextDouble() * 10
		print "$r\t"
		def offset = r % x * (random.nextDouble()  < 0.5 ? -1 : 1)
		print "${r % x}\t${r % x }\t"
//		def offset = random.nextDouble() % x - x
		print "$offset\t"
		return degrees + offset
	}

	def degrees(degrees) {
		if (!random) random = new Random()
		def rsi = 	getRsi()
		def x = Math.round(rsi) == 0 ? 1 : Math.round(rsi)
		def r = random.nextDouble() 
		def offset = r * 10 % x * (random.nextDouble()  < 0.5 ? -1 : 1)
		return Math.abs(offset) < degrees ? degrees + offset : degrees
	}

		def degreesOld(degrees) {
			if (!random) random = new Random()
			def offset = random.nextDouble() % 3 - 3
			return degrees + offset
		}
	@Test
	void test3() {
		
		println "${degreesOld(10)}"
		println "${degreesOld(10)}"
		println "${degreesOld(10)}"
		println "${degreesOld(10)}"
		println "${degreesOld(10)}"
	}
	
}
